ActionResult<T>: Denne typen bruges til at repræsentere en bred vifte af HTTP-responses, som controlleren kan returnere. Denne generiske type er meget fleksibel, da den kan returnere både statuskoder og data. I dette eksempel bruges ActionResult<Temperatures> til at returnere forskellige typer HTTP-responses, herunder 200 OK, 201 Created, 204 No Content, 400 Bad Request, og 404 Not Found. Den kan også returnere en instans af Temperatures klassen i responsens body.

IEnumerable<T>: IEnumerable<T> er et interface, der tillader iteration over en samling af en bestemt type. I denne controller bruges IEnumerable<Temperatures> i GetAll()-metoden til at returnere en samling af Temperatures objekter. Hvis _repository.GetAll() returnerer en liste med Temperatures objekter, vil IEnumerable<Temperatures> tillade klienter, der kalder GetAll()-metoden, at iterere over denne liste.
Brugeren kan tilgå hvert enkelt element i listen  i rækkefølge.
Så når jeg siger, at IEnumerable<T> tillader dig at iterere over en liste, betyder det, at du kan bruge en struktur som foreach-loopet til at besøge hvert element i en samling af typen T.

Static:
static members cannot access non-static fields or methods because they exist independently of any object of the class. Non-static members, however, can access static members because static members are shared among all objects of that class.
Statisk medlem: Når du erklærer et medlem (det kunne være en variabel eller en metode) i en klasse som static, betyder det, at dette medlem ikke er knyttet til et bestemt objekt af klassen. I stedet hører det til klassen selv. Du kan tænke på det som en global variabel eller funktion for alle objekter af den klasse. Derfor kan du tilgå dette medlem direkte ved at bruge klassenavnet, uden at skulle oprette et objekt af klassen først. 
Et statisk medlem kan ikke tilgå et ikke-statisk medlem direkte.!!!!!!!! Men omvendt, et ikke-statisk medlem kan godt tilgå et statisk medlem. 

Void:
Brugt ved metoder der ikke kræver en return.


Repository: 
The Repository is a design pattern that mediates between the domain (Model) and data mapping layers of your application. It provides a simple, clean interface to the underlying data storage (often a database). This means that your application doesn't have to know the specifics of how data is stored - it just uses the Repository to add, update, delete, or retrieve Model objects. This keeps the code clean, and makes it easier to maintain or change the data storage method in the future.

IRepository: 
Fungere som en abstraktion, der definere en række standardoperationer eller metoder til at interagere med dataopbevaring (Her hvor vi normalt bruger en liste). Det indkapsler detaljerne om hvordan dataen er gemt, hvilket giver os mulighed for at arbejde med Repository-interfacet uden at bekymre os om de specifikke implementeringsdetaljer. Et IRepository gør også kodebasen mere modulær og vedligeholdelsesvenlig.
Alt i alt gør IRepository at vi kan arbejde med metoderne uden at tænke over de tekniske detaljer vedrørende selve dataopbevaringen.

Model:
The Model classes are essentially the 'M' in the MVC (Model-View-Controller) pattern. They represent the data and the business logic of your application. They can be simple data structures, or they can include methods, logic, and behaviors related to the data. In a REST API, Models often correspond to the structure of data in your database, and can be used to serialize and deserialize the data going to and coming from the API endpoints.

Controller:
The Controller is the 'C' in MVC and is essentially the traffic cop of the application. In a REST API, each method in a Controller corresponds to an endpoint. When an HTTP request arrives at your API, the routing mechanism determines which Controller and method to invoke based on the URL and HTTP verb (GET, POST, PUT, DELETE, etc.). The Controller then interacts with the Model via the Repository, performs any necessary logic or computation, and returns an appropriate HTTP response. The response typically includes data serialized from the Model (for GET requests, for example), but might also be just a status code (for PUT, POST, or DELETE).

In summary, the Model represents the data, the Repository handles data storage, and the Controller manages requests and responses. This separation of concerns results in a more maintainable, scalable, and testable application.

HTTP Statuskoder:
I RESTful API'er bruges HTTP-statuskoder til at angive status for anmodningen. Disse statuskoder indikerer, om en bestemt HTTP-anmodning er blevet fuldført. Eksempler på statuskoder inkluderer 200 (OK), 404 (Ikke fundet), 403 (Forbidden), 500 (Internal Server Error), etc.


Override ToString():
Hvis du ikke har overskrevet (overridden) ToString-metoden i Temperatures-klassen, ville klassen arve standard ToString-metoden fra System.Object-klassen.
Standardimplementationen af ToString-metoden returnerer fuldt kvalificeret navn på objektets type. Så hvis du forsøger at kalde ToString på en instans af Temperatures-klassen, vil det blot returnere navnet på klassen, som vil være "Temperature.Models.Temperatures".
Overriding ToString er en god praksis, når du vil have en mere meningsfuld tekst repræsentation af dit objekt, hvilket kan være særligt nyttigt til fejlfinding, logging, eller til visning af objektoplysninger på en mere læsbar måde.






